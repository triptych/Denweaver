---

---

<div class="denweaver-profile-manager profileunk">
  <b>Profile Manager</b>
  <div class="loggedout">You are logged out - please log in.</div>
  <div class="loggedin">
    You're logged in. Do you have a profile yet? <button id="checkprofile"
      >Check Profile</button
    >
    <div class="noprofile">
      You don't have a profile yet, would you like to create one?
      <div class="denweaver-profile-create">
        Create a character name: <input type="text" id="dw-create-char-name" />
        <br />
         Create a character description: <textarea
          rows="20"
          cols="80"
          id="dw-create-char-desc"></textarea>
        <br />
        <button id="dw-create-profile" disabled>Create Profle</button>
      </div>
    </div>
    <div class="yesprofile">
      You have a profile! Would you like to make changes?
      <div class="denweaver-profile-details">
        Character name: <input type="text" id="dw-char-name" />
        <br />
         Character description: <textarea rows="20" cols="80" id="dw-char-desc"
        ></textarea>
        <br />
         Level: <span id="dw-char-level">?</span>
        <br />
         XP: <span id="dw-char-xp">?</span>
        <br />
        <button id="dw-profile-update">Update Deets</button>
      </div>
    </div>
  </div>
</div>
<script>
  import Cookies from "js-cookie";

  console.log("profile manager cookies", Cookies);
  console.log("profile manager login cookie", Cookies.get("login"));

  import {
    Client,
    Databases,
    ID,
    Query,
    Account,
    Permission,
    Role,
  } from "appwrite";
  const client = new Client();
  const databases = new Databases(client);
  const account = new Account(client);
  let profileId = null;

  client
    .setEndpoint("https://appwrite.denweaver.com/v1") // Your API Endpoint
    .setProject(import.meta.env.PUBLIC_PROJECT_ID); // Your project ID

  const updateProfile = () => {
    console.log("updateProfile:");
    let char_name = document.querySelector("#dw-char-name").value;
    let desc = document.querySelector("#dw-char-desc").value;

    const update_promise = databases.updateDocument(
      import.meta.env.PUBLIC_DATABASE_ID,
      import.meta.env.PUBLIC_COLLECTION_ID_PROFILES,
      profileId,
      {
        desc,
        char_name,
      }
    );

    update_promise.then(
      (resp) => {
        console.log("update profile resp", resp);
      },
      (err) => {
        console.log("update profile errr", err);
      }
    );
  };

  const checkProfile = () => {
    const acct_promise = account.get();

    acct_promise.then(
      (user) => {
        console.log("user", user);

        const doc_promise = databases.listDocuments(
          import.meta.env.PUBLIC_DATABASE_ID,
          import.meta.env.PUBLIC_COLLECTION_ID_PROFILES,
          [Query.equal("uid", [user.$id])]
        );
        doc_promise.then(
          (response) => {
            console.log("response", response);
            if (response.documents.length > 0) {
              console.log("we have a profile! ");
              document
                .querySelector(".denweaver-profile-manager")
                .classList.add("profile");

              document
                .querySelector(".denweaver-profile-manager")
                .classList.remove("profileunk");

              document.querySelector("#dw-char-name").value =
                response.documents[0].char_name;
              document.querySelector("#dw-char-desc").value =
                response.documents[0].desc;
              document.querySelector("#dw-char-level").innerHTML =
                response.documents[0].level;
              document.querySelector("#dw-char-xp").innerHTML =
                response.documents[0].xp;

              profileId = response.documents[0].$id;
            } else {
              console.log("we don't have a profile!");
              document
                .querySelector(".denweaver-profile-manager")
                .classList.remove("profile");

              document
                .querySelector(".denweaver-profile-manager")
                .classList.remove("profileunk");
            }
          },
          (error) => {
            console.log("error", error);
          }
        );
      },
      (error) => {
        console.log("acct err", error);
      }
    );
  };

  const checkCreate = () => {
    console.log("checking if I can enable the create button yet!");
    const charNameField = document.querySelector("#dw-create-char-name");
    const charDescField = document.querySelector("#dw-create-char-desc");
    const createProfileBtn = document.querySelector("#dw-create-profile");

    if (charNameField.value !== "" && charDescField.value !== "") {
      console.log("enable button!");
      createProfileBtn.removeAttribute("disabled");
    } else {
      console.log("disable button!");
      createProfileBtn.setAttribute("disabled", "disabled");
    }
  };

  const createProfile = () => {
    console.log("createProfile triggered");
    let cr_char_name = document.querySelector("#dw-create-char-name").value;
    let cr_char_desc = document.querySelector("#dw-create-char-desc").value;
    let user_id = null;
    // if (user_id === null) {
    //   console.log("user_id", user_id);
    //   return;
    // }

    const acct_promise = account.get();

    acct_promise.then(
      (resp) => {
        user_id = resp.$id;
        console.log("user_id: ", user_id);
        const create_profile_promise = databases.createDocument(
          import.meta.env.PUBLIC_DATABASE_ID,
          import.meta.env.PUBLIC_COLLECTION_ID_PROFILES,
          ID.unique(),
          {
            char_name: cr_char_name,
            desc: cr_char_desc,
            uid: user_id,
            level: 0,
            xp: 0,
          },
          [
            Permission.read(Role.user(user_id)),
            Permission.update(Role.user(user_id)),
          ]
        );

        create_profile_promise.then(
          (resp) => {
            console.log("success response", resp);
            window.location.reload();
          },
          (err) => {
            console.log("failure response err", err);
          }
        );
      },
      (err) => {
        console.log("account get error:", err);
      }
    );
  };
  // let's start things off
  window.addEventListener("DOMContentLoaded", function () {
    document.querySelector("#checkprofile").addEventListener("click", (e) => {
      checkProfile();
    });

    document
      .querySelector("#dw-profile-update")
      .addEventListener("click", (e) => {
        updateProfile();
      });

    document
      .querySelector("#dw-create-char-name")
      .addEventListener("change", () => {
        console.log("change event!");
        checkCreate();
      });

    document
      .querySelector("#dw-create-char-desc")
      .addEventListener("change", () => {
        console.log("change event");
        checkCreate();
      });

    document
      .querySelector("#dw-create-profile")
      .addEventListener("click", () => {
        console.log("try to create a profile!");
        createProfile();
      });

    console.log("dom content loaded");
    if (Cookies.get("login") === "loggedIn") {
      console.log("profilemanager logged in ");
      document
        .querySelector(".denweaver-profile-manager")
        .classList.add("loggedin");
      //let pm = document.querySelector(".denweaver-profile-manager");
      //console.log("pm", pm);
    }
  });
</script>

<style>
  .denweaver-profile-manager .loggedin {
    display: none;
  }

  .denweaver-profile-manager .loggedout {
    display: block;
  }

  .denweaver-profile-manager.loggedin .loggedin {
    display: block;
  }
  .denweaver-profile-manager.loggedin .loggedout {
    display: none;
  }
  .denweaver-profile-manager .yesprofile {
    display: none;
  }

  .denweaver-profile-manager.profile .yesprofile {
    display: block;
  }
  .denweaver-profile-manager .noprofile {
    display: block;
  }

  .denweaver-profile-manager.profileunk .noprofile {
    display: none;
  }

  .denweaver-profile-manager.profile .noprofile {
    display: none;
  }
</style>
